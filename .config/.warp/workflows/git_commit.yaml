name: Smart Git Commit
description: Create a structured commit message with Gitmoji
command: |
  # Show staged files for context
  echo "Staged files:"
  git diff --cached --name-status
  echo "-------------------"
  
  # Determine type of changes for gitmoji suggestion
  STAGED_FILES=$(git diff --cached --name-only)
  
  # Enhanced change detection
  if echo "$STAGED_FILES" | grep -q "package.json\|requirements.txt\|pyproject.toml\|poetry.lock\|Pipfile"; then
    echo "📦 Detected dependency changes - Consider using :package:"
  fi
  if echo "$STAGED_FILES" | grep -q "\.test\.\|test_\|spec\.\|pytest\|_test"; then
    echo "✅ Detected test files - Consider using :white_check_mark:"
  fi
  if echo "$STAGED_FILES" | grep -q "README\|\.md\|docs/\|CHANGELOG\|LICENSE"; then
    echo "📝 Detected documentation - Consider using :memo:"
  fi
  if echo "$STAGED_FILES" | grep -q "Dockerfile\|docker-compose\|\.dockerignore"; then
    echo "🐳 Detected Docker changes - Consider using :whale:"
  fi
  if echo "$STAGED_FILES" | grep -q "\.github/\|\.gitlab-ci\|\.circleci\|\.travis\.yml"; then
    echo "👷 Detected CI changes - Consider using :construction_worker:"
  fi
  if echo "$STAGED_FILES" | grep -q "\.env\|\.config\|settings\.\|\.ini"; then
    echo "🔧 Detected configuration changes - Consider using :wrench:"
  fi
  if echo "$STAGED_FILES" | grep -q "\.css\|\.scss\|\.less\|\.styl"; then
    echo "💄 Detected style changes - Consider using :lipstick:"
  fi
  if echo "$STAGED_FILES" | grep -q "migrations/\|\.sql\|schema\."; then
    echo "🗃️  Detected database changes - Consider using :card_file_box:"
  fi
  if echo "$STAGED_FILES" | grep -q "security\|auth\|password\|encrypt\|\.env\|secrets\|credentials"; then
    echo "🔒 Detected security changes - Consider using :lock:"
  fi
  if echo "$STAGED_FILES" | grep -q "optimiz\|performance\|cache\|speed\|benchmark"; then
    echo "⚡️ Detected performance changes - Consider using :zap:"
  fi
  if echo "$STAGED_FILES" | grep -q "BREAKING\|DEPRECATED\|REMOVED\|major version"; then
    echo "💥 Detected breaking changes - Consider using :boom:"
  fi
  if echo "$STAGED_FILES" | grep -q "api/\|endpoint\|route\|controller\|swagger\|openapi"; then
    echo "🔄 Detected API changes - Consider using :twisted_rightwards_arrows:"
  fi
  if echo "$STAGED_FILES" | grep -q "terraform\|\.tf\|cloudformation\|k8s\|helm\|ansible\|pulumi"; then
    echo "🏗️  Detected infrastructure changes - Consider using :building_construction:"
  fi
  if echo "$STAGED_FILES" | grep -q "bump\|upgrade\|update.*dependency\|dependency.*update"; then
    echo "⬆️  Detected dependency updates - Consider using :arrow_up:"
  fi
  if echo "$STAGED_FILES" | grep -q "revert\|rollback\|undo"; then
    echo "⏪️ Detected rollback - Consider using :rewind:"
  fi
  if echo "$STAGED_FILES" | grep -q "log\|monitor\|trace\|debug\|metric"; then
    echo "📊 Detected logging/monitoring changes - Consider using :chart_with_upwards_trend:"
  fi
  if echo "$STAGED_FILES" | grep -q "\.css\|\.scss\|\.html\|\.vue\|\.jsx\|\.tsx\|components/\|styles/"; then
    echo "💄 Detected UI changes - Consider using :lipstick:"
  fi
  if echo "$STAGED_FILES" | grep -q "a11y\|aria-\|accessibility\|role="; then
    echo "♿️ Detected accessibility changes - Consider using :wheelchair:"
  fi
  if echo "$STAGED_FILES" | grep -q "\.d.ts\|typing\|types/\|interfaces/\|@type"; then
    echo "🏷️  Detected type changes - Consider using :label:"
  fi
  if echo "$STAGED_FILES" | grep -q "LICENSE\|COPYING\|legal/"; then
    echo "📄 Detected license changes - Consider using :page_facing_up:"
  fi
  
  # Expanded gitmoji list
  echo "\nCommon Gitmojis:"
  echo "✨ :sparkles: - New feature"
  echo "🐛 :bug: - Bug fix"
  echo "♻️  :recycle: - Refactoring"
  echo "📝 :memo: - Documentation"
  echo "🎨 :art: - Formatting/structure"
  echo "⚡️ :zap: - Performance"
  echo "✅ :white_check_mark: - Tests"
  echo "🔧 :wrench: - Configuration"
  echo "📦 :package: - Dependencies"
  echo "🚀 :rocket: - Deployment"
  echo "🔒 :lock: - Security"
  echo "💄 :lipstick: - UI/Style"
  echo "♿️ :wheelchair: - Accessibility"
  echo "🔍 :mag: - SEO"
  echo "🚧 :construction: - Work in Progress"
  echo "⚗️  :alembic: - Experimentation"
  echo "🔥 :fire: - Remove code"
  echo "💥 :boom: - Breaking changes"
  echo "🗃️  :card_file_box: - Database"
  echo "👷 :construction_worker: - CI/CD"
  
  # Enhanced commit types
  echo "\nCommit Types:"
  echo "feat     - A new feature"
  echo "fix      - A bug fix"
  echo "docs     - Documentation only changes"
  echo "style    - Changes that don't affect code meaning"
  echo "refactor - Code change that neither fixes a bug nor adds a feature"
  echo "perf     - Code change that improves performance"
  echo "test     - Adding missing tests or correcting existing tests"
  echo "build    - Changes that affect the build system or dependencies"
  echo "ci       - Changes to CI configuration files and scripts"
  echo "chore    - Other changes that don't modify src or test files"
  echo "revert   - Reverts a previous commit"
  
  # Get commit details
  echo "\nEnter gitmoji (e.g., :sparkles:):"
  read GITMOJI
  
  echo "Enter commit type (feat/fix/docs/style/refactor/perf/test/build/ci/chore/revert):"
  read TYPE
  
  echo "Enter scope (optional, press enter to skip):"
  read SCOPE
  
  echo "Enter brief description:"
  read DESC
  
  echo "Enter longer description (optional, press enter to skip):"
  read BODY
  
  echo "Add breaking change warning? (y/n):"
  read BREAKING
  
  # Construct commit message
  if [ -n "$SCOPE" ]; then
    SCOPE="($SCOPE)"
  fi
  
  MSG="$GITMOJI $TYPE$SCOPE: $DESC"
  if [ -n "$BODY" ]; then
    MSG="$MSG\n\n$BODY"
  fi
  
  if [ "$BREAKING" = "y" ]; then
    MSG="$MSG\n\nBREAKING CHANGE: This commit introduces breaking changes."
  fi
  
  # Show the final message and confirm
  echo "\nFinal commit message:"
  echo "$MSG"
  echo "\nProceed with commit? (y/n)"
  read CONFIRM
  
  if [ "$CONFIRM" = "y" ]; then
    git commit -m "$MSG"
    echo "Commit created successfully!"
  else
    echo "Commit cancelled"
  fi

arguments: [] 